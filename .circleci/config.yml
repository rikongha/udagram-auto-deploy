version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # parameter
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroy environments <<parameters.workflow_id>> "

            aws cloudformation delete-stack \
              --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack \
              --stack-name starter-frontend-<<parameters.workflow_id>>


# revert-migrations:
#   description: Revert the last migration if successfully run in the current workflow.
#   parameters:
#     # Add parameter here
#   steps:
#     - run:
#         name: Revert migrations
#         # Add when this will run
#         command: |
#           # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#           SUCCESS = 1
#           if(( $SUCCESS==1 ));
#           then
#           #  cd backend
#           #  npm install
#           #  Add revert code here. You can find this in the Getting Started section.
#             exit 1
#           fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Backend test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Analyze frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths:
            [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [backend-scan]
      - run:
          name: Analyze backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths:
            [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text) >> .circleci/ansible/inventory.txt

            cat .circleci/ansible/inventory.txt
      # - run: return 1 #simulate job fail
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      # rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'ab:52:25:68:df:4c:3a:d5:48:18:55:d8:f9:3b:df:de'
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli
      - attach_workspace:
          at: .
      - run:
          name: Configure server
          command: |
            # Add environment variables from CircleCI to the EC2 instance(s)
            echo NODE_ENV=production > backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            cat backend/.env

            cd .circleci/ansible
            cat inventory.txt
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: .
          paths:
            - backend
      # rollback on job fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install aws cli
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          command: |
            # Get DB host from AWS and add to env
            export TYPEORM_HOST=$(aws cloudformation list-exports --query "Exports[?Name==\`EndpointAddress-${CIRCLE_WORKFLOW_ID:0:7}\`].Value" --output text)
            echo $TYPEORM_HOST
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env

            cd backend
            # npm install > /dev/null
            # npm run build > /dev/null
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - persist_to_workspace:
          root: .
          paths:
            - backend
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/LgmjquFbYFREyvvh1iAi7v/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      # rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip nodejs curl npm epel-release
            yum install -y ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build 2>/dev/null
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist 2>/dev/null
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   smoke-test:
#     docker:
#       # Lightweight Docker image
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
# docker:
#   # Docker image here
# steps:
#   # Checkout code from git
#   - run:
#       name: Get old stack workflow id
#       command: |
#         # your code here
#         export OldWorkflowID="the id here"
#         export STACKS=[] #put the list of stacks here
#   - run:
#       name: Remove old stacks and files
#       command: |
#         if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#         then
#           # your code here
#         fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
